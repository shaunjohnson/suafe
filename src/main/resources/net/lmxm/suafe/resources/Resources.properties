#
# Copyright (c) 2006-2017 by LMXM LLC <suafe@lmxm.net>
#
# This file is part of Suafe.
#
# Suafe is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Suafe is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Suafe.  If not, see <http://www.gnu.org/licenses/>.
#

application.language=en
application.name={0} - Subversion User Authorization File Editor
application.nameversion=Suafe ${project.version}
application.url=${project.url}
application.fileheader=Created using Suafe ${project.version} (${project.url})
application.error=Error
application.warning=Warning
application.unknown=Unknown
application.server=Server
application.untitled=Untitled
application.unsavedchanges=There are unsaved changes. Do you wish to save the \
changes before closing?
application.unsavedchangesbeforereload=The file has been modified since last \
save. If you reload the changes will be lost. Continue?
application.erroroccurred=Unknown error occurred
application.groups=Groups:
application.users=Users:

accesslevel.readonly=Read only
accesslevel.readwrite=Read/Write
accesslevel.denyaccess=Deny access

button.add=Add
button.addProjectAccessRules=Add Project Rules
button.clone=Clone
button.delete=Delete
button.edit=Edit
button.rename=Rename
button.save=Save
button.cancel=Cancel
button.ok=OK
button.close=Close

generator.error=Error occurred writing file
generator.filenotfound=File is not writable

mainframe.accessrules=Access Rules
mainframe.groups=Groups
mainframe.members=Members
mainframe.serverstructure=Server Structure
mainframe.users=Users

mainframe.accessrulestable.repository=Repository
mainframe.accessrulestable.path=Path
mainframe.accessrulestable.level=Level
mainframe.accessrulestable.usergroup=User/Group

mainframe.button.adduser=Add User
mainframe.button.adduser.tooltip=Add New User
mainframe.button.cloneuser.tooltip=Clone existing user
mainframe.button.addgroup=Add Group
mainframe.button.addgroup.tooltip=Add New Group
mainframe.button.clonegroup.tooltip=Clone existing group
mainframe.button.addaccessrule=Add Access Rule
mainframe.button.addaccessrule.tooltip=Add New Access Rule
mainframe.button.addprojectaccessrules.tooltip=Add New Access Rules for a Project
mainframe.button.renameuser=Rename User
mainframe.button.renameuser.tooltip=Rename existing user
mainframe.button.renamegroup=Rename Group
mainframe.button.renamegroup.tooltip=Rename existing group
mainframe.button.editaccessrule=Edit Access Rule
mainframe.button.editaccessrule.tooltip=Edit selected access rule
mainframe.button.editpath=Edit Path
mainframe.button.editpath.tooltip=Edit selected path
mainframe.button.renamerepository=Rename Repository
mainframe.button.renamerepository.tooltip=Rename selected repository
mainframe.button.deleteaccessrule=Delete Access Rule
mainframe.button.deleteaccessrule.tooltip=Delete selected access rule
mainframe.button.deletepath=Delete Path
mainframe.button.deletepath.tooltip=Delete selected path
mainframe.button.deleterepository=Delete Repository
mainframe.button.deleterepository.tooltip=Delete selected repository
mainframe.button.deleteuser=Delete User
mainframe.button.deleteuser.tooltip=Delete existing user
mainframe.button.deletegroup=Delete Group
mainframe.button.deletegroup.tooltip=Delete existing group
mainframe.button.addremovemembers=Add/Remove Members
mainframe.button.addremovemembers.tooltip=Add/Remove members from selected group
mainframe.button.changemembership=Change Membership
mainframe.button.changemembership.tooltip=Change group membership
mainframe.button.new.tooltip=New File
mainframe.button.open.tooltip=Open File
mainframe.button.preview=Preview
mainframe.button.preview.tooltip=Preview Output
mainframe.button.save.tooltip=Save File
mainframe.button.saveas.tooltip=Save File As

mainframe.tabs.users=Users
mainframe.tabs.groups=Groups
mainframe.tabs.repositories=Repositories
mainframe.tabs.accessrules=Access Rules

mainframe.deleteaccessrule.prompt=Delete the selected access rules?
mainframe.deleteaccessrule.title=Delete Access Rules

mainframe.deleteuser.prompt=Deleting the selected user will also delete all \
access rules defined for the user. Continue?
mainframe.deleteuser.title=Delete User
mainframe.deleteusers.prompt=Deleting the selected users will also delete all \
access rules defined for the users. Continue?
mainframe.deleteusers.title=Delete Users

mainframe.deletegroup.prompt=Deleting the selected group will also delete all \
access rules defined for the group. Continue?
mainframe.deletegroup.title=Delete Group
mainframe.deletegroups.prompt=Deleting the selected groups will also delete \
all access rules defined for the groups. Continue?
mainframe.deletegroups.title=Delete Groups

mainframe.deletepath.prompt=Deleting the selected path will also delete all \
access rules defined for the path. Continue?
mainframe.deletepath.title=Delete Path

mainframe.deleterepository.prompt=Deleting the selected repository will also \
delete all access rules defined for the repository. Continue?
mainframe.deleterepository.title=Delete Repository

mainframe.removefromgroup.prompt=Remove user from selected group?
mainframe.removefromgroup.title=Remove From Group
mainframe.removefromgroups.prompt=Remove user from selected groups?
mainframe.removefromgroups.title=Remove From Groups

mainframe.removemember.prompt=Remove selected member from the group?
mainframe.removemember.title=Remove Member
mainframe.removemembers.prompt=Remove selected members from the group?
mainframe.removemembers.title=Remove Members

mainframe.error.errorloadingusers=Error loading users
mainframe.error.errorloadingaccessruleforedit=Error loading accessrule for edit
mainframe.error.errorloadingaccessrulesforuser=Error loading access rules for user
mainframe.error.errorloadingaccessrulesforgroup=Error loading access rules for group
mainframe.error.errorloadingaccessrulesforrepository=Error loading access rules for repository
mainframe.error.errorloadingaccessrulesforpath=Error loading access rules for path
mainframe.error.errorloadingaccessrulesforserver=Error loading access rules for server
mainframe.error.errorloadinggroupmembers=Error loading group members
mainframe.error.errordeletingaccessrule=Error deleting access rule
mainframe.error.erroreditingaccessrule=Error editing access rule
mainframe.error.errordeletinguser=Error deleting user
mainframe.error.errorrenameinguser=Error renaming user
mainframe.error.errordeletinggroup=Error deleting group
mainframe.error.errorrenaminggroup=Error renaming group
mainframe.error.errordeletingpath=Error deleting path
mainframe.error.erroreditingpath=Error editing path
mainframe.error.errordeletingrepository=Error deleting repository
mainframe.error.errorrenamingrepository=Error renaming repository
mainframe.error.errorprinting=Error printing

mainframe.warning.documentisempty=Document is empty
mainframe.warning.noaccesruleselected=No access rule selected
mainframe.warning.nouserselected=No user selected
mainframe.warning.nogroupselected=No group selected
mainframe.warning.nomemberselected=No member selected

menu.action=Action
menu.action.adduser=Add User
menu.action.addgroup=Add Group
menu.action.addrepository=Add Repository
menu.action.addaccessrule=Add Access Rule
menu.action.addprojectaccessrules=Add Project Access Rules

menu.view=View
menu.view.viewusers=View Users
menu.view.viewgroups=View Groups
menu.view.viewrules=View Rules

menu.file=File
menu.file.new=New
menu.file.new.shortcut=N
menu.file.open=Open
menu.file.open.shortcut=O
menu.file.reload=Reload
menu.file.reload.shortcut=R
menu.file.save=Save
menu.file.save.shortcut=S
menu.file.saveas=Save As
menu.file.saveas.shortcut=S
menu.file.recentfiles=Recent files
menu.file.clearrecentfiles=Clear recent files
menu.file.print=Print
menu.file.print.tooltip=Print file
menu.file.print.shortcut=P
menu.file.exit=Exit
menu.file.exit.shortcut=Q

menu.clone=Clone

menu.reports=Reports
menu.reports.preview=Preview output
menu.reports.statisticsreport=Statistics Report
menu.reports.summaryreport=Summary Report

menu.settings=Settings
menu.settings.multilinegroups=Allow multi-line group definitions
menu.settings.openlastfile=Open last edited file upon startup
menu.settings.monospaced=Monospaced
menu.settings.sanserif=SanSerif
menu.settings.serif=Serif
menu.settings.resetsettings=Clear saved settings

menu.help=Help
menu.help.help=Help
menu.help.license=License
menu.help.about=About

document.unreferencedusers=The following unreferenced users will not be saved.
document.unreferencedrepos=The following unreferenced repositories will not be saved.
document.unreferencedpaths=The following unreferenced paths will not be saved.
document.unreferencedobjectsprompt=Continue saving changes?

about.title=About
about.content=<html><center>A handy administrator's tool for<br>maintaining SVN authorization files.<br><br>https://github.com/shaunjohnson/suafe</center></html>

addaccessrule.title=Add Access Rule
addaccessrule.instructions=Make your selections and click Add
addaccessrule.addrepository=Add Repository
addaccessrule.addrepository.tooltip=Add New Repository
addaccessrule.browse=Browse
addaccessrule.browse.tooltip=Browse Subversion server
addaccessrule.repository=Repository:
addaccessrule.group=Group:
addaccessrule.user=User:
addaccessrule.applyto=Apply To:
addaccessrule.applyto.group=Group
addaccessrule.applyto.user=User
addaccessrule.applyto.allusers=All Users
addaccessrule.level=Level of Access:
addaccessrule.path=Path:
addaccessrule.error.erroraddingrule=Error adding access rule.
addaccessrule.error.grouprulealreadyexists=A matching access rule for that \
group already exists
addaccessrule.error.userrulealreadyexists=A matching access rule for that \
user already exists

addprojectaccessrules.title=Add Project Access Rules
addprojectaccessrules.instructions=Make your selections and click Add
addprojectaccessrules.addrepository=Add Repository
addprojectaccessrules.addrepository.tooltip=Add New Repository
addprojectaccessrules.browse=Browse
addprojectaccessrules.browse.tooltip=Browse Subversion server
addprojectaccessrules.repository=Repository:
addprojectaccessrules.group=Group:
addprojectaccessrules.user=User:
addprojectaccessrules.applyto=Apply To:
addprojectaccessrules.applyto.group=Group
addprojectaccessrules.applyto.user=User
addprojectaccessrules.applyto.allusers=All Users
addprojectaccessrules.level=Level of Access:
addprojectaccessrules.path=Path:
addprojectaccessrules.branches=/branches
addprojectaccessrules.branches.path=/branches
addprojectaccessrules.trunk=/trunk
addprojectaccessrules.trunk.path=/trunk
addprojectaccessrules.tags=/tags
addprojectaccessrules.tags.path=/tags
addprojectaccessrules.error.erroraddingrule=Error adding access rule.
addprojectaccessrules.error.grouprulealreadyexists=A matching access rule for that \
group already exists
addprojectaccessrules.error.userrulealreadyexists=A matching access rule for that \
user already exists

editaccessrule.title=Edit Access Rule
editaccessrule.instructions=Modify selections and click Save
editaccessrule.addrepository=Add Repository
editaccessrule.addrepository.tooltip=Add New Repository
editaccessrule.browse=Browse
editaccessrule.browse.tooltip=Browse Subversion server
editaccessrule.repository=Repository:
editaccessrule.group=Group:
editaccessrule.user=User:
editaccessrule.applyto=Apply To:
editaccessrule.applyto.group=Group
editaccessrule.applyto.user=User
editaccessrule.applyto.allusers=All Users
editaccessrule.level=Level of Access:
editaccessrule.path=Path:
editaccessrule.error.errorsavingrule=Error saving access rule.
editaccessrule.error.grouprulealreadyexists=A matching access rule for that \
group already exists
editaccessrule.error.userrulealreadyexists=A matching access rule for that \
user already exists

addgroup.title=Add Group
addgroup.instructions=Enter group name and click Add
addgroup.label=Group name:
addgroup.savebutton=Add
addgroup.error.groupalreadyexists=A group named "{0}" already exists

renamegroup.title=Rename Group
renamegroup.instructions=Modify the group name and click Save
renamegroup.label=New group name:
renamegroup.savebutton=Save
renamegroup.error.groupalreadyexists=A group named "{0}" already exists

clonegroup.title=Clone Group
clonegroup.instructions=Enter a name for the clone and click Save
clonegroup.label=Clone group name:
clonegroup.savebutton=Save
clonegroup.error.groupalreadyexists=A group named "{0}" already exists

addremovemembers.title=Add/Remove Members
addremovemembers.instructions=Add/Remove members of the group "{0}".
addremovemembers.nonmembers=Non Members
addremovemembers.members=Members
addremovemembers.error.errorloadinggroups=Error loading user groups: {0}

addrepository.title=Add Repository
addrepository.instructions=Enter repository name and click Add
addrepository.label=Repository name:
addrepository.savebutton=Save
addrepository.error.repositoryalreadyexists=A repository named "{0}" already exists.

renamerepository.title=Rename Repository
renamerepository.instructions=Modify the repository name and click Save
renamerepository.label=New repository name:
renamerepository.savebutton=Save
renamerepository.error.repositoryalreadyexists=A repository named "{0}" already exists.

adduser.title=Add User
adduser.instructions=Enter user name and click Add
adduser.label=User name:
adduser.label.alias=Alias:
adduser.savebutton=Add
adduser.error.useralreadyexists=A user named "{0}" already exists.

renameuser.title=Rename User
renameuser.instructions=Modfiy the user name and click Save
renameuser.label=New user name:
renameuser.label.alias=New alias:
renameuser.savebutton=Save
renameuser.error.useralreadyexists=A user named "{0}" already exists.

cloneuser.title=Clone User
cloneuser.instructions=Enter a name for the clone and click Save
cloneuser.label=Clone user name:
cloneuser.label.alias=Close user alias:
cloneuser.savebutton=Save
cloneuser.error.useralreadyexists=A user named "{0}" already exists.

changemembership.title=Change Membership
changemembership.instructions=Change the groups of which "{0}" is a member.
changemembership.notmemberof=Not Member Of
changemembership.memberof=Member Of
changemembership.error.errorloadinggroups=Error loading user groups: {0}

editpath.title=Edit Path
editpath.instructions=Modify the path and click Save
editpath.label=Path:
editpath.savebutton=Save
editpath.error.pathrepositoryalreadyexists=The path "{0}" in repository "{1}" already exists

help.title=Subversion User Authorization File Editor Help

license.title=License

parser.exception=Line: {0} \n {1}
parser.error=Error occurred reading file
parser.filenotfound=File not found
parser.syntaxerror.duplicategroup=Duplicate definition of group "{0}" found.
parser.syntaxerror.duplicatepath=Duplicate definition of path "{0}" found.
parser.syntaxerror.duplicatepathrepository=Duplicate definition of path "{0}" for repository "{1}" found"
parser.syntaxerror.multiplegroupsection=Syntax Error: More than one [group] section found
parser.syntaxerror.invalidpath=Syntax Error: Invalid path specification found
parser.syntaxerror.invalidgrouprule=Syntax Error: Invalid group access rule
parser.syntaxerror.invalidgroupdefinition=Syntax Error: Invalid group definition
parser.syntaxerror.undefinedgroup=Group "{0}" is not defined.
parser.unreadablefile=The specified file is not readable

preview.title=Preview

saveas.title=Save As

reports.header=<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"> \
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
#reports.contenttype=<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
reports.contenttype=
reports.footer=<hr></hr><p>Generated {0} using <a href="{1}">{2}</a><br></br>Valid XHTML 1.0 Strict</p>

statisticsreport.title=Statistics Report
statisticsreport.users=Users
statisticsreport.groups=Groups
statisticsreport.repositories=Repositories
statisticsreport.rules=Access Rules

summaryreport.title=Summary Report
summaryreport.rules=Access Rules
summaryreport.groups=Groups
summaryreport.users=Users
summaryreport.projects=Projects
summaryreport.repositories=Repositories
summaryreport.serverrules=Server Level Access Rules

summaryreport.nogroups=No Groups
summaryreport.nomembers=No Members
summaryreport.noprojects=No Projects
summaryreport.norepos=No Repositories
summaryreport.norules=No Access Rules
summaryreport.invalidrule=Invalid access rule

summaryreport.trunk=Trunk
summaryreport.tags=Tags
summaryreport.branches=Branches

summaryreport.path.trunk=/trunk
summaryreport.path.tags=/tags
summaryreport.path.branches=/branches

application.args.inputfile.help=Input file to be parsed. Otherwise, input is read from stdin.
application.args.outputfile.help=Output file to be parsed. Otherwise, output is written to stdout.
application.args.help.help=Displays command usage.
application.args.verbose.help=Displays verbose command usage and help.
application.args.version.help=Displays version information.
application.args.name.help=Object name.
application.args.groups.help=List of groups.
application.args.users.help=List of users.
application.args.repos.help=Repository name.
application.args.path.help=Path string.
application.args.user.help=User name.
application.args.group.help=Group name.
application.args.access.help=Access level (r | rw | none).
application.args.newname.help=New object name.
application.args.newrepos.help=New repository name.
application.args.newpath.help=New path string.
application.args.newuser.help=New user name.
application.args.newgroup.help=New group name.
application.args.newaccess.help=New access level (r | rw | none).
application.args.cloneuser.help=Clone existing user.
application.args.renameuser.help=Rename existing user.
application.args.deleteuser.help=Delete existing user.
application.args.addgroups.help=Add user to groups.
application.args.countusers.help=Count number of users.
application.args.getusers.help=Get list of users.
application.args.removegroups.help=Remove user from groups.
application.args.getusergroups.help=Get user groups.
application.args.getuserrules.help=Get user access rules.
application.args.addgroup.help=Add new group.
application.args.clonegroup.help=Clone existing group.
application.args.renamegroup.help=Rename existing group.
application.args.deletegroup.help=Delete existing group.
application.args.addmembers.help=Add members to group.
application.args.removemembers.help=Remove members from group.
application.args.countgroups.help=Count number of groups.
application.args.getgroups.help=Get list of groups.
application.args.getgroupmembers.help=Get list of group members.
application.args.getgroupgroupmembers.help=Get list of groups that are members of the group.
application.args.getgroupusermembers.help=Get list of users that are members of the group.
application.args.getgrouprules.help=Get group access rules.
application.args.removemembers.help=Remove members from group.
application.args.renamerepos.help=Rename existing repository.
application.args.deleterepos.help=Delete existing repository.
application.args.countrepos.help=Count number of repositories.
application.args.getrepos.help=Get list of repositories.
application.args.getreposrules.help=Get repository access rules.
application.args.addrule.help=Add new access rule.
application.args.editrule.help=Edit existing access rule.
application.args.deleterule.help=Delete existing access rule.
application.args.countrules.help=Count number of access rules.
application.args.getrules.help=Get list of access rules.
application.args.statisticsreport.help=Generate statistics report.
application.args.summaryreport.help=Generate summary report.
application.args.statisticsreport.help=Generate statistics report.

application.args.invalidsyntax=Invalid syntax
application.args.usage=Usage:
application.args.detailedusage=Detailed Usage:
application.args.executablepath=java -jar ${project.artifactId}-${project.version}.jar
application.args.verbosehelp=Verbose Help:
application.args.verbosehelp.summary=Verbose help provides action specific \
help and examples. Arguments may be specified in any order.

application.args.verbose.inputoutput=\n\
Input and output\n\
================\n\
Suafe accepts input from STDIN or from a file, and will send output to STDOUT \
or to a file.\n\
\n\
Flags:\n\
\t{1} : Path to input file. If not specified then suafe reads input from \
STDIN.\n\
\t{2} : Path to output file. If not specified then suafe writes output to \
STDOUT.\n\
\n\
Example:\n\
\t{0} --{1} /svn/authz --{2} /svn/authz --{3} --{4} shaun --{5} john\n\
\n\
\tcat /svn/authz | {0} --{6} | wc

application.args.verbose.adduser=\n\
Add new user\n\
============\n\
Users don''t exist in an authz file unless they are a member of a group or \
referenced by an access rule. Add a new user by adding the account to a \
group or by defining an access rule for the user.\n

application.args.verbose.cloneuser=\n\
Clone existing user\n\
===================\n\
Creates a complete duplicate of an existing user. The clone will be a member \
of the same groups and have the same access to the same paths.\n\
\n\
Flags:\n\
\t{1} : Clone user command\n\
\t{2} : Name of user to be cloned\n\
\t{3} : Name of the clone\n\
\n\
Example:\n\
\t{0} --{1} --{2} shaun --{3} john\n

application.args.verbose.renameuser=\n\
Rename existing user\n\
==================\n\
Changes the name of an existing user.\n\
\n\
Flags:\n\
\t{1} : Rename user command\n\
\t{2} : Name of user to be renamed\n\
\t{3} : New name for the user\n\
\n\
Example:\n\
\t{0} --{1} --{2} shaun --{3} john\n

application.args.verbose.deleteuser=\n\
Delete existing user\n\
====================\n\
Deletes an existing user. The user will be removed along with all of the \
user''s memberships and access rules.\n\
\n\
Flags:\n\
\t{1} : Delete user command\n\
\t{2} : Name of user to be deleted\n\
\n\
Example:\n\
\t{0} --{1} --{2} shaun\n

application.args.verbose.addgroups=\n\
Add user to groups\n\
==================\n\
Adds a user to one or more existing groups.\n\
\n\
Flags:\n\
\t{1} : Add groups command\n\
\t{2} : Name of user to be added to group(s)\n\
\t{3} : One or more groups\n\
\n\
Example:\n\
\t{0} --{1} --{2} shaun --{3} developer,manager\n

application.args.verbose.removegroups=\n\
Remove user from groups\n\
=======================\n\
Removes a user from one or more existing groups.\n\
\n\
Flags:\n\
\t{1} : Remove groups command\n\
\t{2} : Name of user to be removed from group(s)\n\
\t{3} : One or more groups\n\
\n\
Example:\n\
\t{0} --{1} --{2} shaun --{3} developer,manager\n

application.args.verbose.countusers=\n\
Count number of users\n\
=====================\n\
Counts the number of users.\n\
\n\
Flags:\n\
\t{1} : Count users command\n\
\n\
Example:\n\
\t{0} --{1}\n

application.args.verbose.getusers=\n\
Get list of users\n\
=================\n\
Returns a list of all users mentioned in the authz file.\n\
\n\
Flags:\n\
\t{1} : Get users command\n\
\n\
Example:\n\
\t{0} --{1}\n

application.args.verbose.getusergroups=\n\
Get list of groups of which a user is a member\n\
==============================================\n\
Returns a list of groups of which a specified user is a member.\n\
\n\
Flags:\n\
\t{1} : Get user groups command\n\
\t{2} : Name of user\n\
\n\
Example:\n\
\t{0} --{1} --{2} shaun\n

application.args.verbose.getuserrules=\n\
Get list of access rules in which the user is directly referenced\n\
=================================================================\n\
Returns a list of access rules in which the specified user is directly referenced.\n\
\n\
Flags:\n\
\t{1} : Get user access rules command\n\
\t{2} : Name of user\n\
\n\
Example:\n\
\t{0} --{1} --{2} shaun\n

application.args.verbose.addgroup=\n\
Add new group\n\
=============\n\
Adds a new group.\n\
\n\
Flags:\n\
\t{1} : Add group command\n\
\t{2} : Name of group to be created\n\
\n\
Example:\n\
\t{0} --{1} --{2} manager\n

application.args.verbose.clonegroup=\n\
Clone existing group\n\
====================\n\
Creates a complete duplicate of an existing group. The clone will be a member \
of the same groups and have the same access to the same paths.\n\
\n\
Flags:\n\
\t{1} : Clone group command\n\
\t{2} : Name of group to be cloned\n\
\t{3} : Name of the clone\n\
\n\
Example:\n\
\t{0} --{1} --{2} developer --{3} qa\n		

application.args.verbose.renamegroup=\n\
Rename existing group\n\
===================\n\
Changes the name of an existing group.\n\
\n\
Flags:\n\
\t{1} : Rename group command\n\
\t{2} : Name of group to be renamed\n\
\t{3} : New name for the group\n\
\n\
Example:\n\
\t{0} --{1} --{2} developer --{3} qa\n

application.args.verbose.deletegroup=\n\
Delete existing group\n\
=====================\n\
Deletes an existing group. The group will be removed along with all of the \
group''s memberships and access rules.\n\
\n\
Flags:\n\
\t{1} : Delete group command\n\
\t{2} : Name of group to be deleted\n\
\n\
Example:\n\
\t{0} --{1} --{2} developer\n

application.args.verbose.addmembers=\n\
Add members to group\n\
====================\n\
Adds new members to existing group. Both users and groups may be added\
at the same time.n\
\n\
Flags:\n\
\t{1} : Add members command\n\
\t{2} : One or more users\n\
\t{3} : One or more groups\n\
\n\
Example:\n\
\t{0} --{1} --{2} shaun,robert --{3} qa,manager\n

application.args.verbose.removemembers=\n\
Remove members from group\n\
=========================\n\
Removes members from a group. Users and groups may be removed at the same time.\
\n\
\n\
Flags:\n\
\t{1} : Remove members command\n\
\t{2} : One or more users\n\
\t{3} : One or more groups\n\
\n\
Example:\n\
\t{0} --{1} --{2} shaun,robert --{3} qa,manager\n

application.args.verbose.countgroups=\n\
Count number of groups\n\
======================\n\
Counts the number of groups.\n\
\n\
Flags:\n\
\t{1} : Count groups command\n\
\n\
Example:\n\
\t{0} --{1}\n

application.args.verbose.getgroups=\n\
Get list of groups\n\
==================\n\
Returns a list of all groups mentioned in the authz file.\n\
\n\
Flags:\n\
\t{1} : Get groups command\n\
\n\
Example:\n\
\t{0} --{1}\n

application.args.verbose.getgroupmembers=\n\
Get list of group members\n\
=========================\n\
Returns a list of all members of a group. Both user and group members are \
returned.\n\
\n\
Flags:\n\
\t{1} : Get group members command\n\
\t{2} : Name of group\n\
\n\
Example:\n\
\t{0} --{1} --{2} developer\n

application.args.verbose.getgroupgroupmembers=\n\
Get list of groups that are members of a specified group\n\
========================================================\n\
Returns a list of all group members of a group. Only group members are returned.\n\
\n\
Flags:\n\
\t{1} : Get group''s group members command\n\
\t{2} : Name of group\n\
\n\
Example:\n\
\t{0} --{1} --{2} developer\n

application.args.verbose.getgroupusermembers=\n\
Get list of users that are members of a specified group\n\
=======================================================\n\
Returns a list of all user members of a group. Only user members are returned.\n\
\n\
Flags:\n\
\t{1} : Get group''s user members command\n\
\t{2} : Name of group\n\
\n\
Example:\n\
\t{0} --{1} --{2} developer\n

application.args.verbose.getgrouprules=\n\
Get list of access rules in which the group is directly referenced\n\
==================================================================\n\
Returns a list of access rules in which the specified group is directly referenced.\n\
\n\
Flags:\n\
\t{1} : Get group access rules command\n\
\t{2} : Name of group\n\
\n\
Example:\n\
\t{0} --{1} --{2} developer\n

application.args.verbose.addrepos=\n\
Add new repository\n\
==================\n\
Repositories don't exist in an authz file unless they are referenced by an \
access rule. Add a new repository by defining an access rule for the repository.\n

application.args.verbose.renamerepos=\n\
Rename existing repository\n\
========================\n\
Changes the name of an existing repository.\n\
\n\
Flags:\n\
\t{1} : Rename repository command\n\
\t{2} : Name of repository to be renamed\n\
\t{3} : New name for the repository\n\
\n\
Example:\n\
\t{0} --{1} --{2} mcm --{3} mcmprod\n

application.args.verbose.deleterepos=\n\
Delete existing repository\n\
==========================\n\
Deletes an existing repository. The repository will be removed along with \
all of the repository''s access rules.\n\
\n\
Flags:\n\
\t{1} : Delete repository command\n\
\t{2} : Name of repository to be deleted\n\
\n\
Example:\n\
\t{0} --{1} --{2} mcm\n

application.args.verbose.countrepos=\n\
Count number of repositories\n\
============================\n\
Counts the number of repositories.\n\
\n\
Flags:\n\
\t{1} : Count repositories command\n\
\n\
Example:\n\
\t{0} --{1}\n

application.args.verbose.getrepos=\n\
Get list of repositories\n\
========================\n\
Returns a list of all repositories mentioned in the authz file.\n\
\n\
Flags:\n\
\t{1} : Get repositories command\n\
\n\
Example:\n\
\t{0} --{1}\n

application.args.verbose.getreposrules=\n\
Get list of access rules in which the repository is directly referenced\n\
=======================================================================\n\
Returns a list of access rules in which the specified repository is directly \
referenced. Omit repository name for server level rules.\n\
\n\
Flags:\n\
\t{1} : Get repository access rules command\n\
\t{2} : Name of repository\n\
\n\
Example:\n\
\t{0} --{1} --{2} mcm\n

application.args.verbose.addrule=\n\
Add access rule\n\
===============\n\
Adds a new access rule. If repository is omitted then the new rule applies to \
all repositories.\n\
\n\
Flags:\n\
\t{1} : Add access rule command\n\
\t{2} : Name of repository. If omitted, the rule will apply to all repositories.\n\
\t{3} : Path within the repository\n\
\t{4} : Name of user\n\
\t{5} : Name of group\n\
\t{6} : Access level (r | rw | none)\n\
\n\
Example:\n\
\tGive user shaun read-write access to [mcm:/trunk]\n\
\t{0} --{1} --{2} mcm --{3} /trunk --{4} shaun --{6} rw\n\
\n\
\tDeny all users access to [mcm:/tags]\n\
\t{0} --{1} --{2} mcm --{3} /tags --{4} * --{6} none\n\
\n\
\tGive group manager read-only access to [mcm:/branches]\n\
\t{0} --{1} --{2} mcm --{3} /branches --{5} manager --{6} r\n\

application.args.verbose.editrule=\n\
Edit access rule\n\
================\n\
Edits an existing access rule. The repository, path, and user/group arguments \
are used to match the rule to edit. Arguments prefixed with "new" specify \
changes to the rule.\n\
\n\
Flags:\n\
\t{1} : Edit access rule command\n\
\t{2} : Name of repository. Omit for server level rules.\n\
\t{3} : Path within the repository\n\
\t{4} : Name of user\n\
\t{5} : Name of group\n\
\t{6} : New repository name.\n\
\t{7} : New path within the repository\n\
\t{8} : Name of user\n\
\t{9} : Name of group\n\
\t{10} : New access level (r | rw | none)\n\
\n\
Example:\n\
\tChange user access from read-write to read-only\n\
\t{0} --{1} --{2} mcm --{3} /trunk --{4} shaun --{10} r\n\
\n\
\tChange access rule path from /tags to /management\n\
\t{0} --{1} --{2} mcm --{3} /tags --{5} manager --{7} /management\n\
\n\
\tChange rule to apply to user robert instead of group manager\n\
\t{0} --{1} --{2} mcm --{3} /branches --{5} manager --{8} robert\n\

application.args.verbose.deleterule=\n\
Delete access rule\n\
==================\n\
Deletes an existing access rule. The repository, path, and user/group \
arguments are used to match the rule to delete.\n\
\n\
Flags:\n\
\t{1} : Delete access rule command\n\
\t{2} : Name of repository. Omit for server level rules.\n\
\t{3} : Path within the repository\n\
\t{4} : Name of user\n\
\t{5} : Name of group\n\
\n\
Example:\n\
\t{0} --{1} --{2} mcm --{3} /trunk --{4} shaun\n

application.args.verbose.countrules=\n\
Count number of access rules\n\
============================\n\
Counts the number of access rules.\n\
\n\
Flags:\n\
\t{1} : Count access rules command\n\
\n\
Example:\n\
\t{0} --{1}\n

application.args.verbose.getrules=\n\
Get list of access rules\n\
========================\n\
Returns a list of all access rules.\n\
\n\
Flags:\n\
\t{1} : Get access rules command\n\
\n\
Example:\n\
\t{0} --{1}\n

application.args.verbose.statisticsreport=\n\
Statistics Report\n\
=================\n\
Provides an XHTML statistics report regarding the authz file.\n\
\n\
Flags:\n\
\t{1} : Generate statistics report command\n\
\n\
Example:\n\
\t{0} --{1}\n\

application.args.verbose.summaryreport=\n\
Summary Report\n\
==============\n\
Provides an XHTML summary report regarding the authz file.\n\
\n\
Flags:\n\
\t{1} : Generate summary report command\n\
\n\
Example:\n\
\t{0} --{1}\n\

application.error.accessrequired=Access level is required
application.error.aliasinvalid=Invalid Alias
application.error.aliasinvalidcharacters=Invalid Alias: alias contains invalid characters
application.error.clonerequired=Clone name is required
application.error.fieldrequired=Field {0} is required
application.error.levelinvalid=Invalid access level
application.error.membergroupsmissing=Member groups are missing
application.error.memberusersmissing=Member users are missing
application.error.groupinvalid=Invalid Group
application.error.groupinvalidcharacters=Invalid Group: group contains invalid characters
application.error.groupmissing=Group is missing
application.error.groupsmissing=Groups are missing
application.error.grouprequired=Group name is required
application.error.grouplistrequired=At least one group name is required
application.error.pathinvalid=Invalid Path
application.error.pathinvalidcharacters=Invalid Path: path contains invalid characters
application.error.pathinvalid.endslash=Invalid path: Path may not end with '/'
application.error.pathinvalid.startslash=Invalid path: Path must start with '/'
application.error.pathmissing=Path is missing
application.error.pathrequired=Path is required
application.error.repositoryinvalid=Invalid repository
application.error.repositoryinvalidcharacters=Invalid repository: Name contains invalid characters
application.error.repositorymissing=Repository is missing
application.error.repositoriesmissing=Repositories are missing
application.error.repositoryrequired=Repository name is required
application.error.userinvalid=Invalid User
application.error.userinvalidcharacters=Invalid User: Name contains invalid characters
application.error.usermissing=User is missing
application.error.usersmissing=Users are missing
application.error.userrequired=User name is required
application.error.userorgrouprequired=Either user or group must be specified
application.error.userorgrouplistrequired=At least one user or group name is required

application.error.newgrouprequired=New group name is required
application.error.newrepositoryrequired=New repository name is required
application.error.newuserrequired=New user name is required
application.error.newuserorgrouprequired=Either new user or new group must be specified

application.error.unabletofindgroup=Unable to find group "{0}"
application.error.unabletofindrepository=Unable to find repository "{0}"
application.error.unabletofindrule=Unable to find access rule
application.error.unabletofinduser=Unable to find user "{0}"

application.error.circularreference=Circular reference error. Cannot add group "{0}" since "{1}" is a member of "{0}" or one of it's member groups.

application.error.helpnotloaded=Unable to load help

validation.error.fieldrequired="Field "{0}" is required"